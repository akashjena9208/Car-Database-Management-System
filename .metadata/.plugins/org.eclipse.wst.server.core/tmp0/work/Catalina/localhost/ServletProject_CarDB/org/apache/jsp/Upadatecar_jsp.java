/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2025-02-25 17:48:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.ResultSet;

public final class Upadatecar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.ResultSet");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Update Car</title>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("  /* Background Styling */\r\n");
      out.write("  body {\r\n");
      out.write("    background-image: url(\"https://img.freepik.com/free-photo/dark-style-sky-nighttime_23-2151103593.jpg?t=st=1738178485~exp=1738182085~hmac=4a9ee7076f02f696fafcb6607f30adcde732fcf876e7cd4d9de90aacbdb8b435&w=1380\");\r\n");
      out.write("    background-size: cover;\r\n");
      out.write("    background-position: center;\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    font-family: 'Arial', sans-serif;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  /* Centering the form */\r\n");
      out.write("  .form-container {\r\n");
      out.write("    width: 40%;\r\n");
      out.write("    margin: 80px auto;\r\n");
      out.write("    padding: 20px;\r\n");
      out.write("    background: rgba(255, 255, 255, 0.2);\r\n");
      out.write("    backdrop-filter: blur(10px);\r\n");
      out.write("    border-radius: 15px;\r\n");
      out.write("    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  h1 {\r\n");
      out.write("    color: orange;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  /* Input Fields */\r\n");
      out.write("  input[type=\"text\"], input[type=\"number\"] {\r\n");
      out.write("    width: 90%;\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    margin: 10px 0;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    font-size: 16px;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  /* Readonly Field Styling */\r\n");
      out.write("  input[readonly] {\r\n");
      out.write("    background-color: #ddd;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  /* Update Button */\r\n");
      out.write("  .update-btn {\r\n");
      out.write("    background: #4CAF50;\r\n");
      out.write("    color: white;\r\n");
      out.write("    padding: 12px 18px;\r\n");
      out.write("    border: none;\r\n");
      out.write("    border-radius: 5px;\r\n");
      out.write("    font-size: 16px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    transition: 0.3s;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  .update-btn:hover {\r\n");
      out.write("    background: #45a049;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  /* Error Message */\r\n");
      out.write("  .error-message {\r\n");
      out.write("    color: red;\r\n");
      out.write("    font-size: 18px;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("  }\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
 
  ResultSet rs = (ResultSet) request.getAttribute("carObject"); 
  if(rs.next()) {

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"form-container\">\r\n");
      out.write("  <h1>Update Car Details</h1>  \r\n");
      out.write("\r\n");
      out.write("  <form action=\"update-car\" method=\"post\">\r\n");
      out.write("    <input type=\"number\" value=\"");
      out.print( rs.getInt(1) );
      out.write("\" name=\"carId\" readonly>\r\n");
      out.write("    <input type=\"text\" value=\"");
      out.print( rs.getString(2) );
      out.write("\" name=\"carBrand\">\r\n");
      out.write("    <input type=\"text\" value=\"");
      out.print( rs.getString(3) );
      out.write("\" name=\"carModel\">\r\n");
      out.write("    <input type=\"text\" value=\"");
      out.print( rs.getString(4) );
      out.write("\" name=\"carColor\">\r\n");
      out.write("    <input type=\"number\" value=\"");
      out.print( rs.getInt(5) );
      out.write("\" name=\"carPrice\">\r\n");
      out.write("    <br>\r\n");
      out.write("    <input type=\"submit\" value=\"Update\" class=\"update-btn\">\r\n");
      out.write("  </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
 } else { 
      out.write("\r\n");
      out.write("  <h2 class=\"error-message\">⚠️ Error Fetching Car Details</h2>\r\n");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
